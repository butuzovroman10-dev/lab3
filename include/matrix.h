#pragma once
#include <string>
#include <iostream>
#include <cmath>
#include <stdexcept>
#include <cstring>

/**
 * @brief Структура для представления матрицы символов
 * 
 * Используется для хранения текста в виде двумерной матрицы
 * для последующего шифрования методом транспонирования.
 */
typedef struct {
    char** data;   ///< Указатель на двумерный массив символов
    int rows;      ///< Количество строк в матрице
    int cols;      ///< Количество столбцов в матрице
} Matrix;

// Базовые функции матриц

/**
 * @brief Создает новую матрицу заданного размера
 * 
 * @param rows Количество строк
 * @param cols Количество столбцов
 * @return Matrix Созданная матрица, заполненная пробелами
 * @throws std::bad_alloc Если не удалось выделить память
 */
Matrix create_matrix(int rows, int cols);

/**
 * @brief Освобождает память, занятую матрицей
 * 
 * @param m Ссылка на матрицу для освобождения
 */
void free_matrix(Matrix& m);

// Функции шифрования

/**
 * @brief Преобразует строку в матрицу символов
 * 
 * Текст записывается в матрицу построчно. Если символов меньше,
 * чем ячеек в матрице, остальные ячейки заполняются пробелами.
 * 
 * @param text Входная строка для преобразования
 * @param rows Количество строк в результирующей матрице
 * @param cols Количество столбцов в результирующей матрице
 * @return Matrix Матрица, содержащая символы из строки
 * 
 * @code
 * // Пример использования:
 * Matrix mat = string_to_matrix("HELLO", 2, 3);
 * // Результат:
 * // | H E L |
 * // | L O   |
 * @endcode
 */
Matrix string_to_matrix(const char* text, int rows, int cols);

/**
 * @brief Шифрует матрицу методом транспонирования
 * 
 * Функция выполняет транспонирование матрицы - строки становятся столбцами
 * и наоборот. Это основной метод шифрования в проекте.
 * 
 * @param chars Исходная матрица для шифрования
 * @return Matrix Транспонированная (зашифрованная) матрица
 * 
 * @see decrypt
 * 
 * @code
 * // Пример:
 * // Исходная матрица:
 * // | A B |
 * // | C D |
 * // После encrypt:
 * // | A C |
 * // | B D |
 * @endcode
 */
Matrix encrypt(Matrix chars);

/**
 * @brief Дешифрует матрицу, выполняя обратное транспонирование
 * 
 * Функция восстанавливает исходное сообщение из зашифрованной матрицы
 * путем обратного транспонирования.
 * 
 * @param encrypted Зашифрованная матрица
 * @return std::string Расшифрованная строка
 * 
 * @see encrypt
 */
std::string decrypt(Matrix encrypted);

// Вспомогательные функции

/**
 * @brief Проверяет, является ли число полным квадратом
 * 
 * Используется для определения, можно ли текст разместить
 * в квадратной матрице без остатка.
 * 
 * @param n Число для проверки
 * @return true Если число является полным квадратом
 * @return false Если число не является полным квадратом
 * 
 * @code
 * is_perfect_square(9);  // true (3*3=9)
 * is_perfect_square(10); // false
 * @endcode
 */
bool is_perfect_square(int n);

/**
 * @brief Выводит матрицу в удобочитаемом формате
 * 
 * @param mat Матрица для вывода
 */
void print_matrix(Matrix mat);

/**
 * @brief Вычисляет оптимальный размер матрицы для текста
 * 
 * Функция вычисляет минимальный размер квадратной матрицы,
 * который может вместить все символы текста.
 * 
 * @param text_length Длина текста
 * @return int Размер матрицы (строки = столбцы = возвращаемое значение)
 * 
 * @code
 * calculate_matrix_size(9);  // 3 (3x3=9)
 * calculate_matrix_size(10); // 4 (4x4=16, хватит для 10 символов)
 * @endcode
 */
int calculate_matrix_size(int text_length);